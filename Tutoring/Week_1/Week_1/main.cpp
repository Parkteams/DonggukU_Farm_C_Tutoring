#include<stdio.h>
//#으로 시작하는 문장은 전처리기 지시자, 전처리기: 컴파일전에 실행

//솔루션: 여러 프로젝트들의 컨테이너
//project: 소스코드, 아이콘, 이미지, 데이터들이 들어가는 것

//솔루션 빌드: 컴파일과 링크를 하여서 완전한 실행파일(.exe)을 생성하는 것 / 빌드전에 자동으로 소스코드는 저장됨
//컴파일: 소스코드로 작성해 놓은 것을 컴퓨터가 알아들을 수 있는 언어로 바꾸어 주는 과정
//소스파일->오브젝트 파일(컴파일이라 한다)
//링크: 실행파일을 생성하는 작업, 기계어코드를 라이브러리와 연결시켜서 실행가능한 파일로 만들어냄
//라이브러리: 컴파일된 바이너리로 소스파일의 컴파일된 산물인 오브젝트 파일을 여러개 모아놓은 것
//헤더: 컴파일러가 컴파일하기전, 프로그래밍 문법에 맞게 작성되어있는 선언들의 집합
//헤더파일이 있어야 라이브러리를 사용가능, 그래야 링커가 알아먹을수 있는 심볼네임을 컴파일러가 만들어내서
//컴파일러가 이런 헤더파일을 가지고 심볼네임을 만들어서 오브젝트 파일에 넣어주면 링커가 그럴로 기계어 라이브러리를 뒤져서 링크함

//소스코드(헤더가 포함됨)->솔루션 빌드(컴파일(링크가 기계어 라이브러리에 연결시켜주기 위해 필요한 심볼네임을 오브젝트 파일에 넣어줌)+링크)

//디버깅 시작: f5  // 디버그 없이 실행(걍 실행파일(.exe)여는것) : ctrl + f5

//int: 함수 출력 타입
//main: 함수의 이름
//void: 함수의 입력 타입
int main(void)
//main 함수는 c프로그램에서 가장 처음으로 실행되는 부분, 모든 c프로그램은 여기서 시작한다, 모든 c프로그램에는 반드시 하나의 main()함수가 있어야함.
//함수의 시작
{
	//\n: 줄바꿈
	//\t: Tab
	printf("Hello World!\t");
	printf("Hello World!\t");
	//안에거 출력해라

	return 0;
	//0을 반환한다.
	//0: 프로그램이 정상적으로 종료되었다는 것
	//외부(운영체제)로 0을 반환한다.
}
//함수 종료